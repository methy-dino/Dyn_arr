/*header automatically generated by autoHead*/
#pragma once
#include<stdlib.h> /* malloc, free and size_t.*/
#include<string.h> /*memcpy*/
#include<stdio.h>
typedef struct arr {
	/* sizeof(char) == 1, can get to any byte using chars.*/
	/* sizeof(char) == 1, can get to any byte using chars.*/
	void* arr; 
	size_t element_size;
	size_t length;
	size_t capacity;
	void (*free)(void*);
} Dyn_arr;
void* arr_get(Dyn_arr* arr, size_t index);
void grow_darr(Dyn_arr* darr, size_t inc);
/* creates a dyn_arr with the provided bytes and lengths
 * beware that memory must be allocated since the grow method calls realloc()
 */
Dyn_arr* init_arr(void* init_vals, size_t init_quan, size_t val_size, void (*freefn)(void*));
/* creates a dyn_arr with spare space, copying bytes from init_vals */
Dyn_arr* build_arr(void* init_vals, size_t init_quan, size_t val_size, void(*freefn)(void*));
Dyn_arr* empty_arr(size_t init_quan, size_t val_size, void (*freefn)(void*));
/* puts element at the end of 'arr', checking if it needs to grow to fit that data */
void arr_add(Dyn_arr* arr, void* element);
void arr_add_at(Dyn_arr* arr, void* element, size_t index);
/* removes the element at index, reducing index of things higher than it. */
void arr_remove(Dyn_arr* arr, size_t index);
/* removes an element from the array, and returns it. */
void* arr_fetch(Dyn_arr* arr, size_t index);
size_t arr_find(Dyn_arr* arr, void* target, int(*is_equal)(void* a, void* b));
void arr_discard(Dyn_arr* arr);
void arr_print(Dyn_arr* arr, void (printer)(void*));
/* to be used on arr_print.*/
void addressPrint(void* ptr);
